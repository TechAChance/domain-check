#!/bin/bash
# dmnchk v2.0
# Description: Check for domain name availability
# fork from github.com/BGundlach/domain-check

####################################################################################################
AVAILABLE_ONLY=false
EXPORT_CSV=false
DEBUG=0
print_debug() {
  if [ $DEBUG -eq 1 ]; then
    echo "[DEBUG] $@"
  fi
}
usage () {
		echo "USAGE:"
		echo "  dmnchk [options] domains(without tld extentions)"
		echo " "
		echo "EXAMPLE: "
		echo "  dmnchk purple"
		echo " "
		echo "Sample Output: "
		echo "  purple.com : AVAILABLE"
		echo "  purple.net : TAKEN (from: Go Daddy, LLC)"
		echo "  purple.ac  : UNKNOWN"
		echo " etc."
		echo " "
		echo "OPTIONS:"
    echo "  -l list all tlds"
		echo "  -a search all (include every tld)"
		echo "  -i display available results only"
    echo "  -s output as csv"
    echo "  -h display this help message"
}

####################################################################################################

if [ "$#" == "0" ]; then
	usage
	exit 1
fi

####################################################################################################

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	TARGET="$(readlink "$SOURCE")"
	if [[ $SOURCE == /* ]]; then
		SOURCE="$TARGET"
	else
		SCRIPT_DIR="$(dirname "$SOURCE")"
		SOURCE="$SCRIPT_DIR/$TARGET" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	fi
done
scriptPath="$(cd -P "$(dirname "$SOURCE")" && pwd)"
while getopts ":seialh" opt; do
	case $opt in
	h)
    usage
		exit 1
		;;
	l)
		LIST=true
		;;
  i)
    AVAILABLE_ONLY=true
    ;;
	[ae])
		EXTENDED=true
		;;
  s)
    EXPORT_CSV=true
    ;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		;;
	esac
done

shift $(($OPTIND - 1))
if [ "$#" == "0" ] && [ "$LIST" != true ]; then
	echo "No domain to check!"
	exit 1
fi

DOMAIN_NAME=$1
DOMAIN_NAME_SIZE=${#DOMAIN_NAME}

####################################################################################################
####################################################################################################
function update_tlds() {
		echo "list is updating, this may take a while" >&2
		wget -qP ${scriptPath}/ https://data.iana.org/TLD/tlds-alpha-by-domain.txt
		tail -n +2 ${scriptPath}/tlds-alpha-by-domain.txt >${scriptPath}/extendedalpha
		grep -v "XN--" ${scriptPath}/extendedalpha >${scriptPath}/tlds-alpha-by-domain.txt
		mv ${scriptPath}/tlds-alpha-by-domain.txt ${scriptPath}/extendedalpha
}

function who_is () {
  whois $1 2> /dev/null
}

function check_domain() {

  local DOMAIN=$1
  local PADDING=$(($DOMAIN_NAME_SIZE + 18))
  ## egrep TO BE IMPROVED
  ## echo "$WHOIS" | egrep -q 'No match for|NOT FOUND|Not Found|not found|Status: AVAILABLE|^Available|Domain Status: free^|No Data Found|has not been regi|No entri|No Object Found|available for registration|The queried object does not exist|This domain name has not been registered|no matching objects found'
	host $DOMAIN | egrep -q 'not found'
  NOT_FOUND=$?
	if [ $NOT_FOUND -eq 0 ]; then
    if [ "$EXPORT_CSV" = false ]; then
		  printf "%-${PADDING}s : AVAILABLE\n"  "$DOMAIN"
    else
      printf "%s;AVAILABLE;\n"  "$DOMAIN"
    fi

  else
    if [ "$AVAILABLE_ONLY" = false ]; then
      # whois $1 | egrep -qi 'Domain not found'
      WHOIS=$(who_is $DOMAIN)
      echo "$WHOIS" | egrep -qi 'no whois server'
      NO_WHOIS=$?
      ## If no WHOIS server, then put status as UNKNOWN
      ## To be improved
      if [ $NO_WHOIS -eq 0 ]; then
        if [ "$EXPORT_CSV" = false ]; then
          printf "%-${PADDING}s : TAKEN (no whois info)\n" "$DOMAIN"
        else
          printf "%s;TAKEN;no whois\n" "$DOMAIN"
        fi
        return 0
      fi

      REGISTRAR=$( echo "$WHOIS" | grep 'Registrar:' | head -n1)
      REGISTRAR="${REGISTRAR##*Registrar:}"

      ## Specific cases .it, .eu, .fr, ....
      if [ ! "$REGISTRAR" ]; then
        # for .it
        REGISTRAR=$( echo "$WHOIS" | grep -A1 "Registrar" | grep 'Organization:' | head -n1)
        print_debug $REGISTRAR
        REGISTRAR="${REGISTRAR##*Organization:}"
        print_debug $REGISTRAR
      fi
      if [ ! "$REGISTRAR" ]; then
        # for .eu
        REGISTRAR=$( echo "$WHOIS" | grep -A1 "Registrar:" | grep 'Name:' | head -n1)
        print_debug $REGISTRAR
        REGISTRAR="${REGISTRAR##*Name:}"
        print_debug $REGISTRAR
      fi
      if [ ! "$REGISTRAR" ]; then
        # for .fr
        REGISTRAR=$( echo "$WHOIS" | grep "registrar:" | head -n1)
        print_debug $REGISTRAR
        REGISTRAR="${REGISTRAR##*registrar:}"
        print_debug $REGISTRAR
      fi

      REGISTRAR="$(echo $REGISTRAR| sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//' )"

      ## next part TO BE IMPROVED
      if [ "$REGISTRAR" ]; then
        if [ "$EXPORT_CSV" = false ]; then
          printf "%-${PADDING}s : TAKEN (from: %s)\n" "$DOMAIN" "$REGISTRAR"
        else
          printf "%s;TAKEN;%s\n" "$DOMAIN" "$REGISTRAR"
        fi
      else
        if [ "$EXPORT_CSV" = false ]; then
          printf "%-${PADDING}s : TAKEN (unknown registrar)\n" "$DOMAIN"
        else
          printf "%s;TAKEN;unknown registrar\n" "$DOMAIN"
        fi
      fi
    fi
	fi
}
####################################################################################################
####################################################################################################
## Defaults tlds
DOMAINS=(
'agency'
'ai'
'app'
'art'
'biz'
'blog'
'cloud'
'com'
'company'
'dev'
'digital'
'eu'
'expert'
'fr'
'global'
'group'
'in'
'info'
'io'
'it'
'live'
'mc'
'me'
'net'
'online'
'org'
# 'shop' ## always a network connection errror when performing a whois on .shop
'site'
'space'
'store'
'stream'
'systems'
'tech'
'uk'
'website'
'world'
'xyz'
'trade'
'cc'
)

IFS=$'\n' DOMAINS=($(sort <<<"${DOMAINS[*]}" | tr '[:upper:]' '[:lower:]'))
unset IFS

if [ "$EXPORT_CSV" = true ]; then
  echo 'DOMAIN;STATUS;REGISTRAR'
fi

if [ "$EXTENDED" = true ]; then
  update_tlds
  DOMAINS=()
	while read line; do
		THISDOMAIN=$(echo $line | tr '[:upper:]' '[:lower:]')
		DOMAINS+=($THISDOMAIN)
	done < ${scriptPath}/extendedalpha
fi

if [ "$LIST" = true ]; then
	ELEMENTS=${#DOMAINS[@]}
	for ((i = 0; i < $ELEMENTS; i++)); do
		printf "%-8s\n" "${DOMAINS[${i}]}"
	done
  # | column -x
	exit 0
fi

ELEMENTS=${#DOMAINS[@]}
while (("$#")); do
	for i in $(seq 0 $((${ELEMENTS}-1))); do
    print_debug "checking ${DOMAINS[${i}]}"
		check_domain ${DOMAIN_NAME}.${DOMAINS[${i}]}
	done
	shift
done

# sleep $(($ELEMENTS / 3))
